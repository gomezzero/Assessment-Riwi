// <auto-generated />
using System;
using Assessment_Riwi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assessment_Riwi.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20241115143328_AddDoctorUniqueIdentifier")]
    partial class AddDoctorUniqueIdentifier
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Assessment_Riwi.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AppointmentDay")
                        .HasColumnType("date")
                        .HasColumnName("appointment_day");

                    b.Property<TimeOnly>("AppointmentTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("appointment_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDay = new DateOnly(2024, 11, 18),
                            AppointmentTime = new TimeOnly(9, 30, 0),
                            Description = "check-up with dr. martinez",
                            DoctorId = 2,
                            PatientId = 1,
                            Status = "scheduled"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDay = new DateOnly(2024, 11, 20),
                            AppointmentTime = new TimeOnly(14, 15, 0),
                            Description = "follow-up consultation",
                            DoctorId = 6,
                            PatientId = 2,
                            Status = "scheduled"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDay = new DateOnly(2024, 11, 14),
                            AppointmentTime = new TimeOnly(8, 45, 0),
                            Description = "routine physical exam",
                            DoctorId = 1,
                            PatientId = 3,
                            Status = "completed"
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDay = new DateOnly(2024, 11, 22),
                            AppointmentTime = new TimeOnly(11, 0, 0),
                            Description = "dental check-up",
                            DoctorId = 8,
                            PatientId = 4,
                            Status = "canceled"
                        },
                        new
                        {
                            Id = 5,
                            AppointmentDay = new DateOnly(2024, 11, 25),
                            AppointmentTime = new TimeOnly(15, 0, 0),
                            Description = "general health assessment",
                            DoctorId = 9,
                            PatientId = 5,
                            Status = "scheduled"
                        },
                        new
                        {
                            Id = 6,
                            AppointmentDay = new DateOnly(2024, 11, 30),
                            AppointmentTime = new TimeOnly(12, 30, 0),
                            Description = "eye examination",
                            DoctorId = 5,
                            PatientId = 6,
                            Status = "rescheduled"
                        },
                        new
                        {
                            Id = 7,
                            AppointmentDay = new DateOnly(2024, 11, 27),
                            AppointmentTime = new TimeOnly(7, 45, 0),
                            Description = "annual check-up",
                            DoctorId = 3,
                            PatientId = 7,
                            Status = "scheduled"
                        },
                        new
                        {
                            Id = 8,
                            AppointmentDay = new DateOnly(2024, 11, 10),
                            AppointmentTime = new TimeOnly(13, 45, 0),
                            Description = "post-surgery follow-up",
                            DoctorId = 7,
                            PatientId = 8,
                            Status = "completed"
                        },
                        new
                        {
                            Id = 9,
                            AppointmentDay = new DateOnly(2024, 11, 23),
                            AppointmentTime = new TimeOnly(10, 30, 0),
                            Description = "consultation on chronic pain",
                            DoctorId = 4,
                            PatientId = 9,
                            Status = "scheduled"
                        },
                        new
                        {
                            Id = 10,
                            AppointmentDay = new DateOnly(2024, 11, 17),
                            AppointmentTime = new TimeOnly(6, 15, 0),
                            Description = "vaccination",
                            DoctorId = 5,
                            PatientId = 10,
                            Status = "scheduled"
                        });
                });

            modelBuilder.Entity("Assessment_Riwi.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("DepartureTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("departure_time");

                    b.Property<TimeOnly>("EntryTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("entry_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartureTime = new TimeOnly(16, 0, 0),
                            EntryTime = new TimeOnly(8, 0, 0),
                            Name = "john smith",
                            Password = "$2a$11$gVK80d/aq30DFbTCVhVkLOG0jp9FqsRpGegERiyc08Y7/poNcPQb6",
                            Role = "doctor"
                        },
                        new
                        {
                            Id = 2,
                            DepartureTime = new TimeOnly(17, 0, 0),
                            EntryTime = new TimeOnly(9, 0, 0),
                            Name = "emily davis",
                            Password = "$2a$11$n6iFAkXI7BOskqW0sGACzeUXJnZnYqJ7R6bVTfnaBV1p60fAY6Ple",
                            Role = "doctor"
                        },
                        new
                        {
                            Id = 3,
                            DepartureTime = new TimeOnly(15, 30, 0),
                            EntryTime = new TimeOnly(7, 30, 0),
                            Name = "michael johnson",
                            Password = "$2a$11$uPFjG/rApiAsFCaasB1ygOs45xkNxWWPFRaUD7/mH4VNdy5Eqa1pK",
                            Role = "doctor"
                        },
                        new
                        {
                            Id = 4,
                            DepartureTime = new TimeOnly(18, 0, 0),
                            EntryTime = new TimeOnly(10, 0, 0),
                            Name = "sophia brown",
                            Password = "$2a$11$Le6WcFjhypYOPdSXOgMMO.4MC7A34Me6JLIuNcSTrPXCs.D.A3FS2",
                            Role = "doctor"
                        },
                        new
                        {
                            Id = 5,
                            DepartureTime = new TimeOnly(14, 0, 0),
                            EntryTime = new TimeOnly(6, 0, 0),
                            Name = "james williams",
                            Password = "$2a$11$QM0RYA7TMqRi6/y1KaztGOh/UZn.k2FYIpn6nu3IiHlxW2jP9FrlK",
                            Role = "doctor"
                        },
                        new
                        {
                            Id = 6,
                            DepartureTime = new TimeOnly(21, 0, 0),
                            EntryTime = new TimeOnly(13, 0, 0),
                            Name = "olivia martinez",
                            Password = "$2a$11$Vj36vb45zMYlvfGmvFmJGOSYBNZzDRr9MtgT0pX2nLbtGADjnghpK",
                            Role = "doctor"
                        },
                        new
                        {
                            Id = 7,
                            DepartureTime = new TimeOnly(20, 0, 0),
                            EntryTime = new TimeOnly(12, 0, 0),
                            Name = "benjamin wilson",
                            Password = "$2a$11$n8AQLYn4wE1h0cjAI3XUqexzLaPZcNEbUADC74D2ZHJCXQKoO/NM6",
                            Role = "doctor"
                        },
                        new
                        {
                            Id = 8,
                            DepartureTime = new TimeOnly(19, 0, 0),
                            EntryTime = new TimeOnly(11, 0, 0),
                            Name = "isabella miller",
                            Password = "$2a$11$kPETeApz2jKxdh2DsUg7s.dVxlUQOJMS/c.DDK5uawq502YoDPlFO",
                            Role = "doctor"
                        },
                        new
                        {
                            Id = 9,
                            DepartureTime = new TimeOnly(22, 0, 0),
                            EntryTime = new TimeOnly(14, 0, 0),
                            Name = "elijah garcia",
                            Password = "$2a$11$rQu6zNJpbBjtaBOVneCSE.UPkrNFg9EaXAO1QO7YKaRjrH5MOPZZq",
                            Role = "doctor"
                        },
                        new
                        {
                            Id = 10,
                            DepartureTime = new TimeOnly(13, 30, 0),
                            EntryTime = new TimeOnly(5, 30, 0),
                            Name = "amelia clark",
                            Password = "$2a$11$WdgNEBaG0Ki5B7SFya28/ea13MOg4/Qvthh7NVmj4KMsKr489fkxW",
                            Role = "doctor"
                        });
                });

            modelBuilder.Entity("Assessment_Riwi.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("patient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "alice.green@example.com",
                            Name = "alice green",
                            Password = "$2a$11$bHv06tjMz7rtJdn6vbotgu/f8UvFiy8BzXuqyKtNiS2IkWG1bPsKq",
                            Role = "Patient"
                        },
                        new
                        {
                            Id = 2,
                            Address = "bob.brown@example.com",
                            Name = "bob brown",
                            Password = "$2a$11$3hiWuAxx4LKnqcF1uj3BFu5dkp3LZHlpXXnGyIjiOTSxq2VFiXuwW",
                            Role = "Patient"
                        },
                        new
                        {
                            Id = 3,
                            Address = "charlie.white@example.com",
                            Name = "charlie white",
                            Password = "$2a$11$yUd0GeDn22EdOpq1QtF42uI7QXeLuoF/pAE9n/8yNeDK.Z5DG6Pf6",
                            Role = "Patient"
                        },
                        new
                        {
                            Id = 4,
                            Address = "diana.black@example.com",
                            Name = "diana black",
                            Password = "$2a$11$49SMxGcUdL/tK2L1ML9/EOwWHm5PJmxYoi8fdWESsbxmkcN7TLq.u",
                            Role = "Patient"
                        },
                        new
                        {
                            Id = 5,
                            Address = "edward.harris@example.com",
                            Name = "edward harris",
                            Password = "$2a$11$d3Kd/XHATDJFZIdbbbqxkOh/gC12QvlEkAkbg7Lq6sqqXtmBpaHFO",
                            Role = "Patient"
                        },
                        new
                        {
                            Id = 6,
                            Address = "fiona.scott@example.com",
                            Name = "fiona scott",
                            Password = "$2a$11$2WMcvkynZgnQ13Jdjq/UV.9w4WEQ3kCa3eCKQd7EUgy0rxUJuJxHi",
                            Role = "Patient"
                        },
                        new
                        {
                            Id = 7,
                            Address = "george.clark@example.com",
                            Name = "george clark",
                            Password = "$2a$11$2j8cj/QnHBa8WBavOm3ZC.qbt3zJrr/SIjQ0lj8FJBJ5aEZTXC1DC",
                            Role = "Patient"
                        },
                        new
                        {
                            Id = 8,
                            Address = "hannah.king@example.com",
                            Name = "hannah king",
                            Password = "$2a$11$xJQH72CNUW5KnP0jXmQD6O/ryyQLyq21gUXFLR/EtAMAOGM90gkje",
                            Role = "Patient"
                        },
                        new
                        {
                            Id = 9,
                            Address = "ian.wilson@example.com",
                            Name = "ian wilson",
                            Password = "$2a$11$kZD6R8UMZ5fmLUbdDAgydO8JvN/3Rh4O0tlmkfCUOKLy7y1andM5q",
                            Role = "Patient"
                        },
                        new
                        {
                            Id = 10,
                            Address = "julia.turner@example.com",
                            Name = "julia turner",
                            Password = "$2a$11$sBZpZlrqi6ukxJDkP4p9YudN2C4BHJeQ6vNjIoGgu35Z5az/FbRL2",
                            Role = "Patient"
                        });
                });

            modelBuilder.Entity("Assessment_Riwi.Models.Appointment", b =>
                {
                    b.HasOne("Assessment_Riwi.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment_Riwi.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
